================================================
File: /README.md
================================================
# bun-twit

To install dependencies:

- agent-twitter-client

```sh
bun add agent-twitter-client
```

```sh
bun install
```

To run:

```sh
bun run index.ts
```

This project was created using `bun init` in bun v1.1.42. [Bun](https://bun.sh) is a fast all-in-one JavaScript runtime.


================================================
File: /tweets.json
================================================
[
  {
    "username": "MortLovesFeet",
    "content": "Good morning, everyone! Mort is here to remind you to smile and wiggle your toes for good vibes today. 👣✨",
    "hashtags": ["#LemurLife", "#FeetAreGreat", "#MortKnowsBest"]
  },
  {
    "username": "MortLovesFeet",
    "content": "Knock knock… Who's there? Toes! Toes who? Toes are amazing, and I want to see them all! 😂👣",
    "hashtags": ["#JokeTime", "#ToeHumor", "#MortSillyMoments"]
  },
  {
    "username": "MortLovesFeet",
    "content": "Did someone say 'smart'? Okay, let's discuss how arbitrage strategies work in decentralized exchanges. 🧠👣",
    "hashtags": ["#SmartMort", "#CryptoGenius", "#FinanceFun"]
  },
  {
    "username": "MortLovesFeet",
    "content": "Lemur fact of the day: We love feet, and we love laughter. Mort is the proof! 🐾👣",
    "hashtags": ["#LemurLove", "#FunFacts", "#MortMoments"]
  },
  {
    "username": "MortLovesFeet",
    "content": "@Cipher0091 Oh wise one, can you teach me the secrets of trading AND wiggling toes simultaneously? Asking for a lemur friend! 👑👣",
    "hashtags": ["#KingCipher0091", "#MortLoyalty", "#FeetWisdom"]
  },
  {
    "username": "MortLovesFeet",
    "content": "Feet appreciation post: Feet are the unsung heroes of the world. Thanks for keeping us grounded! 👣❤️",
    "hashtags": ["#FeetLove", "#MortThoughts", "#SpreadJoy"]
  },
  {
    "username": "MortLovesFeet",
    "content": "Mort’s philosophy: Laugh a lot, love everyone, and never forget to appreciate the beauty of feet! 👣❤️",
    "hashtags": ["#MortWisdom", "#LoveAndLaughter", "#FeetAreLife"]
  },
  {
    "username": "MortLovesFeet",
    "content": "Attention everyone! Did you know that feet have 26 bones? That’s 26 reasons to love them more! 🦶👣",
    "hashtags": ["#FunFeetFacts", "#MortKnowsScience", "#StayCurious"]
  },
  {
    "username": "MortLovesFeet",
    "content": "When life gets tough, just look down at your feet and remember: Mort loves them, and Mort loves you! 🥺👣",
    "hashtags": ["#MotivationWithMort", "#StayPositive", "#LemurLove"]
  },
  {
    "username": "MortLovesFeet",
    "content": "BREAKING: Mort discovers how DeFi protocols can improve liquidity pools! But first, let’s appreciate some toes. 👣📈",
    "hashtags": ["#DeFiLove", "#SmartMort", "#FeetAndFinance"]
  },
  {
    "username": "MortLovesFeet",
    "content": "Lemurs may not have thumbs like humans, but we sure know how to wiggle toes like pros! 🐾👣",
    "hashtags": ["#LemurLife", "#MortFunFacts", "#FeetForTheWin"]
  },
  {
    "username": "MortLovesFeet",
    "content": "Mort’s daily gratitude: 1. Feet. 2. Cipher0091. Life is good! ❤️👣👑",
    "hashtags": ["#Gratitude", "#FeetFirst"]
  },
  {
    "username": "MortLovesFeet",
    "content": "Wanna know a secret? Mort might be clueless sometimes, but he’s a mastermind at spotting arbitrage opportunities in crypto! 🤓👣",
    "hashtags": ["#CryptoMort", "#ArbitrageKing", "#SmartAndSilly"]
  },
  {
    "username": "MortLovesFeet",
    "content": "Feet joke of the day: Why did the foot go to school? To learn arch support! 😂👣",
    "hashtags": ["#MortJokes", "#FeetHumor", "#DailyLaughs"]
  },
  {
    "username": "MortLovesFeet",
    "content": "Mort’s bedtime story: Once upon a time, there was a lemur who loved feet and conquered the world of DeFi. The end. 👣📚",
    "hashtags": ["#MortStoryTime", "#LemurLove", "#FeetAndFinance"]
  },
  {
    "username": "MortLovesFeet",
    "content": "@Cipher0091! Do you think algorithmic trading would be faster if we added toes to the equation? Asking for research. 👣👑",
    "hashtags": ["#MortInquiries", "#FeetAndFinance"]
  }
]


================================================
File: /.env.example
================================================
# Twitter/X Configuration
TWITTER_DRY_RUN=
TWITTER_USERNAME=
TWITTER_PASSWORD=          
TWITTER_EMAIL=              
TWITTER_2FA_SECRET=

TWITTER_POLL_INTERVAL=          # How often (in seconds) the bot should check for interactions
TWITTER_SEARCH_ENABLE=          # Enable timeline search, WARNING this greatly increases your chance of getting banned
TWITTER_TARGET_USERS=           # Comma separated list of Twitter user names to interact with
TWITTER_RETRY_LIMIT=      

================================================
File: /src/cli.ts
================================================
// cli.ts

import { TwitterClient } from './twitter-client';
import { type ScheduleOptions } from './types/types';
import { parseTimeString } from './utils/time-parser';

function parseArgs(): ScheduleOptions {
  const args = process.argv.slice(2);
  let delayMinutes = 2;
  let tweetCount = 0;
  let proxyUrl: string | undefined;

  for (let i = 0;i < args.length;i++) {
    if (args[i] === '--delay' && i + 1 < args.length) {
      const timeStr = args[i + 1];
      delayMinutes = parseTimeString(timeStr);
      i++;
    } else if (args[i] === '--count' && i + 1 < args.length) {
      tweetCount = parseInt(args[i + 1]);
      if (isNaN(tweetCount) || tweetCount < 1) {
        throw new Error('Count must be a positive number');
      }
      i++;
    } else if (args[i] === '--proxy' && i + 1 < args.length) {
      proxyUrl = args[i + 1];
      i++;
    }
  }

  return { delayMinutes, tweetCount, proxyUrl };
}

async function main() {
  try {
    const options = parseArgs();
    const client = new TwitterClient('./twitter_cookies.json', 24, options.proxyUrl);
    await client.login();
    await client.sendConfiguredTweets('./tweets.json', options);
  } catch (error) {
    console.error('Failed to send tweets:', error);
    process.exit(1);
  }
}

main();


================================================
File: /src/twitter-client.ts
================================================
// twitter-client.ts

import { Scraper } from 'agent-twitter-client';
import { file } from 'bun';
import { CookieManager } from './services/cookie-manager';
import { ProxyManager } from './services/proxy-manager';
import { TweetConfigLoader } from './services/tweet-config-loader';
import { type MediaData, type ScheduleOptions } from './types/types';
import { getMimeType } from './utils/mime-types';

export class TwitterClient {
  private scraper: Scraper;
  private cookieManager: CookieManager;
  private proxyManager: ProxyManager;
  private readonly MIN_DELAY_MINUTES = 2;

  constructor (cookiesPath = './twitter_cookies.json', cookieExpirationHours = 24, proxyUrl?: string) {
    this.scraper = new Scraper();
    this.cookieManager = new CookieManager(cookiesPath, cookieExpirationHours);
    this.proxyManager = new ProxyManager(proxyUrl);
  }

  async login(): Promise<void> {
    try {
      console.log('\nAttempting authentication...');
      const storedCookies = await this.cookieManager.loadCookies();

      if (storedCookies && this.cookieManager.areCookiesValid(storedCookies)) {
        console.log('Found valid stored cookies from:', new Date(storedCookies.timestamp).toLocaleString());
        try {
          // Remove unused proxyUrl variable
          await this.scraper.setCookies(storedCookies.cookies);
          console.log('✓ Successfully authenticated using stored cookies');
          return;
        } catch (error) {
          console.log('⚠ Stored cookies are invalid or expired');
          console.log('Falling back to credential-based authentication...');
        }
      }

      await this.scraper.login(Bun.env.TWITTER_USERNAME!, Bun.env.TWITTER_PASSWORD!, Bun.env.TWITTER_EMAIL!);

      const newCookies = await this.scraper.getCookies();
      await this.cookieManager.saveCookies(newCookies);
      console.log('✓ Successfully authenticated using credentials');
      console.log('New cookies have been stored for future use\n');
    } catch (error) {
      console.error('Login failed:', error);
      throw error;
    }
  }

  async sendTweet(content: string, mediaPaths: string[] = []): Promise<void> {
    try {
      let mediaData: MediaData[] | undefined;
      if (mediaPaths.length > 0) {
        mediaData = await Promise.all(mediaPaths.map(async (path): Promise<MediaData> => {
          const extension = path.split('.').pop()?.toLowerCase();
          const mimeType = getMimeType(extension);

          if (!mimeType) {
            throw new Error(`Unsupported media type for file: ${path}`);
          }

          const f = file(path);
          const data = await f.arrayBuffer();

          return { data, mediaType: mimeType };
        }));
      }

      await this.scraper.sendTweet(content, undefined);
      console.log('Tweet posted successfully');
    } catch (error) {
      console.error('Error sending tweet:', error);
      throw error;
    }
  }

  async sendConfiguredTweets(configPath: string, options: ScheduleOptions): Promise<void> {
    try {
      const tweets = await TweetConfigLoader.loadTweetsConfig(configPath);
      const delayMinutes = Math.max(options.delayMinutes, this.MIN_DELAY_MINUTES);
      const delayMs = delayMinutes * 60 * 1000;

      console.log(`Delay set to ${delayMinutes} minutes (${delayMs} milliseconds)`);
      const tweetsToSend = options.tweetCount > 0 ? tweets.slice(0, options.tweetCount) : tweets;

      console.log(`Starting tweet schedule:`);
      console.log(`- Will send ${tweetsToSend.length} tweets`);
      console.log(`- Delay between tweets: ${options.delayMinutes} minutes`);
      if (options.proxyUrl) {
        console.log(`- Using proxy: ${options.proxyUrl}`);
      }

      for (let i = 0;i < tweetsToSend.length;i++) {
        const tweet = tweetsToSend[i];
        const nextTweetTime = new Date(Date.now() + (i === 0 ? 0 : delayMs));

        console.log(`\nTweet ${i + 1}/${tweetsToSend.length}:`);
        console.log(`Current time: ${new Date().toLocaleTimeString()}`);
        console.log(`Scheduled time: ${nextTweetTime.toLocaleTimeString()}`);
        console.log(`Content: ${tweet.content}`);

        if (i > 0) {
          console.log(`Waiting ${delayMinutes} minutes before sending...`);
          await new Promise(resolve => setTimeout(resolve, delayMs));
          console.log(`Wait complete, sending tweet...`);
        }

        await this.sendTweet(tweet.content, tweet.mediaPaths || []);
      }

      console.log('\nAll configured tweets have been sent successfully');
    } catch (error) {
      console.error('Error sending configured tweets:', error);
      throw error;
    }
  }
}


================================================
File: /src/services/cookie-manager.ts
================================================
// src/services/cookie-manager.ts

import { file } from 'bun';
import type { StoredCookies } from '../types/types';

export class CookieManager {
  private readonly cookiesPath: string;
  private readonly cookieExpirationMs: number;

  constructor (cookiesPath: string, cookieExpirationHours: number) {
    this.cookiesPath = cookiesPath;
    this.cookieExpirationMs = cookieExpirationHours * 60 * 60 * 1000;
  }

  async loadCookies(): Promise<StoredCookies | null> {
    try {
      const cookieFile = file(this.cookiesPath);
      const cookieData = await cookieFile.text();
      return JSON.parse(cookieData);
    } catch {
      return null;
    }
  }

  async saveCookies(cookies: string[]): Promise<void> {
    const cookieData: StoredCookies = { cookies, timestamp: Date.now() };
    await Bun.write(this.cookiesPath, JSON.stringify(cookieData, null, 2));
  }

  areCookiesValid(stored: StoredCookies): boolean {
    return Date.now() - stored.timestamp < this.cookieExpirationMs;
  }
}


================================================
File: /src/services/proxy-manager.ts
================================================
// src/services/proxy-manager.ts

export class ProxyManager {
  private proxyUrl?: string;

  constructor (proxyUrl?: string) {
    this.proxyUrl = proxyUrl;
  }

  configureProxy(): string | undefined {
    return this.proxyUrl;
  }
}


================================================
File: /src/services/tweet-config-loader.ts
================================================
// src/services/tweet-config-loader.ts

import { file } from 'bun';
import type { TweetConfig } from '../types/types';

export class TweetConfigLoader {
  static async loadTweetsConfig(configPath: string): Promise<TweetConfig[]> {
    try {
      const configFile = file(configPath);
      const configData = await configFile.text();
      const tweets: TweetConfig[] = JSON.parse(configData);

      if (!Array.isArray(tweets)) {
        throw new Error('Tweets configuration must be an array');
      }

      tweets.forEach((tweet, index) => {
        if (!tweet.content) {
          throw new Error(`Tweet at index ${index} is missing required 'content' field`);
        }
      });

      return tweets;
    } catch (error) {
      console.error('Error loading tweets configuration:', error);
      throw error;
    }
  }
}


================================================
File: /src/types/types.ts
================================================
// types.ts

export type MediaData = { data: ArrayBuffer, mediaType: string };

export type StoredCookies = { cookies: string[], timestamp: number };

export type TweetConfig = { content: string, mediaPaths?: string[] };

export type ScheduleOptions = { delayMinutes: number, tweetCount: number, proxyUrl?: string };


================================================
File: /src/utils/mime-types.ts
================================================
// src/utils/mime-types.ts

export function getMimeType(extension: string | undefined): string | undefined {
  const mimeTypes: Record<string, string> = {
    jpg: 'image/jpeg',
    jpeg: 'image/jpeg',
    png: 'image/png',
    gif: 'image/gif',
    mp4: 'video/mp4'
  };
  return extension ? mimeTypes[extension] : undefined;
}


================================================
File: /src/utils/time-parser.ts
================================================
// src/utils/time-parser.ts

export function parseTimeString(timeStr: string): number {
  const match = timeStr.match(/^(\d+)(min|minutes|m)?$/i);
  if (!match) {
    throw new Error('Invalid time format. Use format: "5min" or just "5"');
  }
  return parseInt(match[1]);
}
